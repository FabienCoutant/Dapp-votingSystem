{"version":3,"sources":["utils/web3React.js","states/contract/contractSlice.js","states/proposals/proposalSlice.js","states/index.js","hooks/useContract.js","utils/contractHelpers.js","utils/formatProposal.js","states/contract/hooks.js","components/Admin/AddWhitelist.js","components/Admin/ListWhitelist.js","components/Admin/index.js","utils/truncateWalletAddress.js","constants/index.js","components/Header/index.js","components/Proposal/AddProposal.js","components/Proposal/ProposalList.js","components/Proposal/index.js","states/proposals/hooks.js","components/App.js","hooks/web3.js","index.js"],"names":["injected","InjectedConnector","supportedChainIds","contractSlice","createSlice","name","initialState","owner","status","userVoterData","hasVoted","isRegistered","votedProposalId","whitelistedList","reducers","fetchOwner","state","action","payload","updateWorkflowStatus","fetchUserVoterData","fetchWhitelistedList","addWhitelistAddress","push","newWhitelist","isAlsoOwner","addUserHasVote","parseInt","proposalId","actions","proposalSlice","proposalList","winnerId","fetchProposalList","addProposal","addProposalVote","voteCount","setWinnerProposalId","store","configureStore","reducer","contract","proposal","useContract","useWeb3React","library","chainId","useMemo","contractJSON","Error","deployedNetwork","networks","eth","Contract","abi","address","getContract","VOTING_CONTRACT","error","console","serializeProposal","description","useIsOwner","account","useSelector","AddWhitelist","dispatch","useDispatch","whitelistedAddresses","useState","setError","useEffect","events","VoterRegistered","on","returnValues","includes","addWhitelist","event","a","preventDefault","target","value","methods","addNewVoter","send","from","Alert","variant","Form","onSubmit","Row","Col","Control","type","id","placeholder","Button","ListWhitelist","ListGroup","Table","striped","bordered","hover","length","map","Admin","isOwner","workflowStatus","handleOnClick","nextWorkflowStatus","results","WorkflowStatusChange","VotesTallied","getWinningProposalId","call","Card","className","Header","onClick","disabled","size","Body","truncateWalletAddress","startLength","endLength","substring","WorflowStatusName","isWhitelisted","Navbar","bg","expand","Brand","style","paddingLeft","Toggle","aria-controls","Collapse","Text","paddingRight","undefined","ProposalRegistered","newProposal","some","getProposalById","onSubmitProposal","string","toUpperCase","slice","toLowerCase","ProposalList","userData","voteProposal","index","getNumberOfProposals","getNbProposal","addVote","buttonVariant","renderProposalItem","Proposal","getProposalList","getProposals","res","proposals","useFetchProposalsList","getWinnerProposalId","useFetchWinnerId","Voted","renderVoterData","AddProposal","Title","App","suppress","active","activate","ethereum","window","handleConnect","log","handleChainChanged","handleAccountsChanged","accounts","handleNetworkChanged","networkId","removeListener","useInactiveListener","tried","setTried","isAuthorized","then","catch","useEagerConnect","getOwner","useFetchOwner","getWhitelistedAddresses","getListOfWhitelist","whitelisted","filter","user","getVoterInfoByAddress","r","useFetchWhitelistedAddr","getWorkflowStatus","getCurrentStatus","useFetchWorkflowStatus","getVoterData","voter","useUserData","Container","marginTop","ReactDOM","render","getLibrary","provider","Web3","document","getElementById"],"mappings":"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","file":"static/js/main.7e8f092d.chunk.js","sourcesContent":["import Web3 from \"web3\";\nimport { InjectedConnector } from \"@web3-react/injected-connector\";\n\nexport const injected = new InjectedConnector({\n  supportedChainIds: [3,1337],\n});\n\nexport const getLibrary = (provider) => {\n  return new Web3(provider);\n};\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n  owner: null,\n  status: 0,\n  userVoterData: {\n    hasVoted: false,\n    isRegistered: false,\n    votedProposalId: 0,\n  },\n  whitelistedList: [],\n};\n\nexport const contractSlice = createSlice({\n  name: \"contract\",\n  initialState,\n  reducers: {\n    fetchOwner: (state, action) => {\n      state.owner = action.payload;\n    },\n    updateWorkflowStatus: (state, action) => {\n      state.status = action.payload;\n    },\n    fetchUserVoterData: (state, action) => {\n      state.userVoterData = action.payload;\n    },\n    fetchWhitelistedList: (state, action) => {\n      state.whitelistedList = action.payload;\n    },\n    addWhitelistAddress: (state, action) => {\n      state.whitelistedList.push(action.payload.newWhitelist);\n      if (action.payload.isAlsoOwner) {\n        state.userVoterData.isRegistered = action.payload.isAlsoOwner;\n      }\n    },\n    addUserHasVote: (state, action) => {\n      state.userVoterData.hasVoted = action.payload.hasVoted;\n      state.userVoterData.votedProposalId = parseInt(action.payload.proposalId);\n    },\n  },\n});\n\nexport const {\n  fetchOwner,\n  updateWorkflowStatus,\n  fetchUserVoterData,\n  fetchWhitelistedList,\n  addWhitelistAddress,\n  addUserHasVote,\n} = contractSlice.actions;\n\nexport default contractSlice.reducer;\n","import { createSlice } from \"@reduxjs/toolkit\";\nimport { current } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n  proposalList: [],\n  winnerId: null,\n};\n\nexport const proposalSlice = createSlice({\n  name: \"proposal\",\n  initialState,\n  reducers: {\n    fetchProposalList: (state, action) => {\n      state.proposalList = action.payload;\n    },\n    addProposal: (state, action) => {\n      state.proposalList.push(action.payload);\n    },\n    addProposalVote: (state, action) => {\n      state.proposalList[action.payload].voteCount =\n        state.proposalList[action.payload].voteCount + 1;\n    },\n    setWinnerProposalId: (state, action) => {\n      state.winnerId = parseInt(action.payload.winnerId);\n    },\n  },\n});\n\nexport const {\n  fetchProposalList,\n  addProposal,\n  addProposalVote,\n  setWinnerProposalId,\n} = proposalSlice.actions;\n\nexport default proposalSlice.reducer;\n","import { configureStore } from \"@reduxjs/toolkit\";\n\nimport contractSlice from \"./contract/contractSlice\";\nimport proposalSlice from \"./proposals/proposalSlice\";\n\nconst store = configureStore({\n  reducer: {\n    contract: contractSlice,\n    proposal: proposalSlice,\n  },\n});\nexport default store;\n","import VOTING_CONTRACT from \"../contracts/Voting.json\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { useMemo } from \"react\";\nimport { getContract } from \"../utils/contractHelpers\";\n\nexport function useContract() {\n  const { library, chainId } = useWeb3React();\n  return useMemo(() => {\n    if (!library) return null;\n    try {\n      return getContract(VOTING_CONTRACT, library, chainId);\n    } catch (error) {\n      console.error(\"Failed to get contract\", error);\n      return null;\n    }\n  }, [library, chainId, VOTING_CONTRACT]);\n}\n","export function getContract(contractJSON, library, chainId) {\n  if (!contractJSON) {\n    throw Error(`JSON file empty`);\n  }\n  const deployedNetwork = contractJSON.networks[chainId];\n  return new library.eth.Contract(\n    contractJSON.abi,\n    deployedNetwork && deployedNetwork.address\n  );\n}\n","export const serializeProposalDescription = (string) => {\n  return string[0].toUpperCase() + string.slice(1).toLowerCase();\n};\n\nexport const serializeProposal = (proposal) => {\n  return {\n    description: proposal.description,\n    voteCount: parseInt(proposal.voteCount),\n  };\n};\n\nexport const serializeVoter = (voter) => {\n  return {\n    hasVoted: voter.hasVoted,\n    isRegistered: voter.isRegistered,\n    votedProposalId: parseInt(voter.votedProposalId),\n  };\n};\n","import { useEffect, useMemo } from \"react\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useContract } from \"../../hooks/useContract\";\nimport {\n  fetchOwner,\n  fetchWhitelistedList,\n  fetchUserVoterData,\n  updateWorkflowStatus,\n} from \"./contractSlice\";\nimport { serializeVoter } from \"../../utils/formatProposal\";\n\nexport const useFetchOwner = () => {\n  const dispatch = useDispatch();\n  const contract = useContract();\n  useEffect(() => {\n    const getOwner = async () => {\n      const res = await contract.methods.owner().call();\n      dispatch(fetchOwner(res));\n    };\n    if (contract !== null) {\n      getOwner();\n    }\n  }, [contract, dispatch]);\n};\n\nexport const useIsOwner = () => {\n  const { account } = useWeb3React();\n  const owner = useSelector((state) => state.contract.owner);\n  return useMemo(() => owner === account, [account, owner]);\n};\nexport const useIsWhitelisted = () => {\n  const { account } = useWeb3React();\n  const isRegistered = useSelector(\n    (state) => state.contract.userVoterData.isRegistered\n  );\n  return useMemo(() => isRegistered === account, [account, isRegistered]);\n};\n\nexport const useUserData = () => {\n  const dispatch = useDispatch();\n  const { account } = useWeb3React();\n  const contract = useContract();\n  useEffect(() => {\n    const getVoterData = async () => {\n      const res = await contract.methods.getVoterInfoByAddress(account).call();\n      dispatch(fetchUserVoterData(serializeVoter(res)));\n    };\n    if (contract !== null) {\n      getVoterData();\n    }\n  }, [contract, account, dispatch]);\n};\n\nexport const useFetchWhitelistedAddr = () => {\n  const dispatch = useDispatch();\n  const contract = useContract();\n  useEffect(() => {\n    const getWhitelistedAddresses = async () => {\n      const res = await contract.methods.getListOfWhitelist().call();\n      const whitelisted = res.filter(async (user) => {\n        const r = await contract.methods.getVoterInfoByAddress(user).call();\n        return r.isRegistered;\n      });\n      dispatch(fetchWhitelistedList(whitelisted));\n    };\n    if (contract !== null) {\n      getWhitelistedAddresses();\n    }\n  }, [contract, dispatch]);\n};\n\nexport const useFetchWorkflowStatus = () => {\n  const dispatch = useDispatch();\n  const contract = useContract();\n  useEffect(() => {\n    const getWorkflowStatus = async () => {\n      const res = parseInt(await contract.methods.getCurrentStatus().call());\n      dispatch(updateWorkflowStatus(res));\n    };\n    if (contract !== null) {\n      getWorkflowStatus();\n    }\n  }, [contract, dispatch]);\n};\n","import React, { useEffect, useState } from \"react\";\nimport { Form, Button, Alert, Col, Row } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { useContract } from \"../../hooks/useContract\";\nimport { addWhitelistAddress } from \"../../states/contract/contractSlice\";\n\nconst AddWhitelist = () => {\n  const { account } = useWeb3React();\n  const contract = useContract();\n  const dispatch = useDispatch();\n  const whitelistedAddresses = useSelector(\n    (state) => state.contract.whitelistedList\n  );\n  const [error, setError] = useState(\"\");\n\n  useEffect(() => {\n    if (contract !== null) {\n      contract.events.VoterRegistered().on(\"data\", ({ returnValues }) => {\n        const newWhitelist = returnValues[\"voterAddress\"];\n        if (!whitelistedAddresses.includes(newWhitelist)) {\n          const isAlsoOwner = newWhitelist === account;\n          dispatch(addWhitelistAddress({ newWhitelist, isAlsoOwner }));\n        }\n      });\n    }\n  }, [contract]);\n\n  const addWhitelist = async (event) => {\n    event.preventDefault();\n    const address = event.target.address.value;\n    if (!whitelistedAddresses.includes(address)) {\n      setError(\"\");\n      await contract.methods.addNewVoter(address).send({ from: account });\n    } else setError(`${address} is already whitelisted`);\n  };\n\n  return (\n    <>\n      {error !== \"\" && <Alert variant=\"danger\">{error}</Alert>}\n      <Form onSubmit={addWhitelist}>\n        <Row>\n          <Col>\n            <Form.Control type=\"text\" id=\"address\" placeholder=\"@\" />\n          </Col>\n          <Col>\n            <Button type=\"submit\" variant=\"success\">\n              Whitelist\n            </Button>\n          </Col>\n        </Row>\n      </Form>\n      <br />\n    </>\n  );\n};\nexport default AddWhitelist;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { ListGroup, Table } from \"react-bootstrap\";\n\nconst ListWhitelist = () => {\n  const whitelistedAddresses = useSelector(\n    (state) => state.contract.whitelistedList\n  );\n\n  const renderWhitelisted = () => {\n    return whitelistedAddresses.map((address) => {\n      return (\n        <tr key={address}>\n          <td>{address}</td>\n        </tr>\n      );\n    });\n  };\n  return (\n    <ListGroup variant=\"flush\">\n      <Table striped bordered hover>\n        <thead>\n          <tr>\n            <th>\n              Addresses already whitelisted : {whitelistedAddresses.length}\n            </th>\n          </tr>\n        </thead>\n        <tbody>{renderWhitelisted()}</tbody>\n      </Table>\n    </ListGroup>\n  );\n};\n\nexport default ListWhitelist;\n","import React from \"react\";\nimport { useContract } from \"../../hooks/useContract\";\nimport { useIsOwner } from \"../../states/contract/hooks\";\nimport { Card, Button } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { updateWorkflowStatus } from \"../../states/contract/contractSlice\";\nimport AddWhitelist from \"./AddWhitelist\";\nimport ListWhitelist from \"./ListWhitelist\";\nimport { setWinnerProposalId } from \"../../states/proposals/proposalSlice\";\n\nconst Admin = () => {\n  const contract = useContract();\n  const { account } = useWeb3React();\n  const dispatch = useDispatch();\n  const isOwner = useIsOwner();\n  const workflowStatus = useSelector((state) => state.contract.status);\n\n  const handleOnClick = async () => {\n    if (contract !== null && isOwner && workflowStatus < 4) {\n      const res = await contract.methods\n        .nextWorkflowStatus()\n        .send({ from: account });\n    }\n    if (contract !== null && isOwner && workflowStatus === 4) {\n      await contract.methods.results().send({ from: account });\n    }\n  };\n\n  contract.events.WorkflowStatusChange().on(\"data\", ({ returnValues }) => {\n    dispatch(updateWorkflowStatus(parseInt(returnValues[\"newStatus\"])));\n  });\n\n  contract.events.VotesTallied().on(\"data\", async () => {\n    const winnerId = await contract.methods.getWinningProposalId().call();\n    dispatch(setWinnerProposalId({ winnerId }));\n  });\n\n  return (\n    <Card className=\"mb-4\">\n      <Card.Header>\n        Admin panel :{\"  \"}\n        {workflowStatus !== 5 && (\n          <Button\n            className=\"btn btn-primary\"\n            onClick={handleOnClick}\n            disabled={workflowStatus === 5}\n            size=\"sm\"\n          >\n            {workflowStatus < 4 ? \"Next Workflow\" : \"Call Result\"}\n          </Button>\n        )}\n      </Card.Header>\n      <Card.Body>\n        {workflowStatus === 0 && <AddWhitelist />}\n        <ListWhitelist />\n      </Card.Body>\n    </Card>\n  );\n};\n\nexport default Admin;\n","/**\n *\n * @param address\n * @param startLength\n * @param endLength\n * @returns string\n */\nconst truncateWalletAddress = (address, startLength = 4, endLength = 4) => {\n  return `${address.substring(0, startLength)}...${address.substring(\n    address.length - endLength\n  )}`;\n};\n\nexport default truncateWalletAddress;\n","export const WorflowStatusName = [\n  \"Registering Voters\",\n  \"Proposal Registration Started\",\n  \"Proposal Registration Ended\",\n  \"Voting Session Started\",\n  \"Voting Session Ended\",\n  \"Votes Tallied\",\n];\n\nexport const UserRoles = [\"Admin\", \"Whitelisted\"];\n","import React from \"react\";\nimport { Navbar } from \"react-bootstrap\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport truncateWalletAddress from \"../../utils/truncateWalletAddress\";\nimport { useIsOwner } from \"../../states/contract/hooks\";\nimport { useSelector } from \"react-redux\";\nimport { WorflowStatusName } from \"../../constants\";\n\nexport default function Header() {\n  const { account } = useWeb3React();\n  const isWhitelisted = useSelector(\n    (state) => state.contract.userVoterData.isRegistered\n  );\n  const isOwner = useIsOwner();\n  const workflowStatus = useSelector((state) => state.contract.status);\n\n  const renderRole = () => {\n    if (isOwner && isWhitelisted) {\n      return `Admin & Whitelisted`;\n    } else if (isOwner) {\n      return `Admin`;\n    } else if (isWhitelisted) {\n      return `Whitelisted`;\n    }\n    return `Nobody`;\n  };\n  const renderAddress = () => {\n    if (account !== undefined) {\n      return `Address : ${truncateWalletAddress(account)}`;\n    }\n    return `Address : Loading...`;\n  };\n\n  return (\n    <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\">\n      <Navbar.Brand style={{ paddingLeft: \"48px\" }}>Voting System - Only on Ropsten network</Navbar.Brand>\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n      <Navbar.Collapse className=\"justify-content-end\">\n        <Navbar.Text>\n          Your Role is : {renderRole()} | Current Workflow Status :{\" \"}\n          {WorflowStatusName[workflowStatus]}\n        </Navbar.Text>\n      </Navbar.Collapse>\n      <Navbar.Collapse\n        className=\"justify-content-end\"\n        style={{ paddingRight: \"48px\" }}\n      >\n        <Navbar.Text>{renderAddress()}</Navbar.Text>\n      </Navbar.Collapse>\n    </Navbar>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport { Form, Button, Alert, Col, Row } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { useContract } from \"../../hooks/useContract\";\nimport {\n  serializeProposal,\n  serializeProposalDescription,\n} from \"../../utils/formatProposal\";\nimport { addProposal } from \"../../states/proposals/proposalSlice\";\n\nconst AddWhitelist = () => {\n  const { account } = useWeb3React();\n  const contract = useContract();\n  const dispatch = useDispatch();\n  const proposalList = useSelector((state) => state.proposal.proposalList);\n  const userData = useSelector((state) => state.contract.proposalList);\n  const [error, setError] = useState(\"\");\n\n  useEffect(() => {\n    if (contract !== null) {\n      contract.events\n        .ProposalRegistered()\n        .on(\"data\", async ({ returnValues }) => {\n          const newProposal = returnValues[\"proposalId\"];\n          if (\n            !proposalList.some(\n              (proposal) => proposal.description === newProposal\n            )\n          ) {\n            const proposal = await contract.methods\n              .getProposalById(newProposal)\n              .call();\n            dispatch(addProposal(serializeProposal(proposal)));\n          }\n        });\n    }\n  }, [contract]);\n\n  const onSubmitProposal = async (event) => {\n    event.preventDefault();\n    const description = serializeProposalDescription(\n      event.target.description.value\n    );\n    if (\n      !proposalList.some((proposal) => proposal.description === description)\n    ) {\n      setError(\"\");\n      await contract.methods.addProposal(description).send({ from: account });\n    } else setError(`${description} is already proposed`);\n  };\n\n  return (\n    <>\n      {error !== \"\" && <Alert variant=\"danger\">{error}</Alert>}\n      <Form onSubmit={onSubmitProposal}>\n        <Row>\n          <Col>\n            <Form.Control\n              type=\"text\"\n              id=\"description\"\n              placeholder=\"Description of your proposal\"\n            />\n          </Col>\n          <Col>\n            <Button type=\"submit\" variant=\"success\">\n              New Proposal\n            </Button>\n          </Col>\n        </Row>\n      </Form>\n      <br />\n    </>\n  );\n};\nexport default AddWhitelist;\n","import React, { useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Alert, ListGroup, Table } from \"react-bootstrap\";\nimport { Button } from \"react-bootstrap\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { useContract } from \"../../hooks/useContract\";\n\nconst ProposalList = () => {\n  const { account } = useWeb3React();\n  const contract = useContract();\n  const proposalList = useSelector((state) => state.proposal.proposalList);\n  const winnerId = useSelector((state) => state.proposal.winnerId);\n  const workflowStatus = useSelector((state) => state.contract.status);\n  const userData = useSelector((state) => state.contract.userVoterData);\n  const [error, setError] = useState(\"\");\n\n  const voteProposal = async (index) => {\n    const getNbProposal = await contract.methods.getNumberOfProposals().call();\n    if (!userData.hasVoted && getNbProposal >= index) {\n      setError(\"\");\n      await contract.methods.addVote(index).send({ from: account });\n    } else setError(`You already Voted`);\n  };\n\n  const renderProposalItem = () => {\n    const buttonVariant =\n      workflowStatus === 3 && !userData.hasVoted ? \"info\" : \"secondary\";\n    return proposalList.map((proposal, index) => {\n      return (\n        <tr\n          key={index}\n          className={winnerId === index ? \"bg-success text-white\" : \"\"}\n        >\n          <td>\n            {proposal.description}\n            {winnerId === index && <span className=\"fw-bold\"> - WINNER</span>}\n          </td>\n          <td>{proposal.voteCount}</td>\n          {userData.isRegistered && workflowStatus === 3 && (\n            <td>\n              <Button\n                onClick={() => voteProposal(index)}\n                variant={buttonVariant}\n                disabled={workflowStatus !== 3 || userData.hasVoted}\n                size=\"sm\"\n              >\n                {!userData.hasVoted ? \"Vote\" : \"You already Voted\"}\n              </Button>\n            </td>\n          )}\n        </tr>\n      );\n    });\n  };\n  return (\n    <>\n      {error !== \"\" && <Alert variant=\"danger\">{error}</Alert>}\n      <ListGroup variant=\"flush\">\n        <Table striped bordered hover>\n          <thead>\n            <tr>\n              <th>Description</th>\n              <th>Number of vote</th>\n              {workflowStatus === 3 && <th>Actions</th>}\n            </tr>\n          </thead>\n          <tbody>{renderProposalItem()}</tbody>\n        </Table>\n      </ListGroup>\n    </>\n  );\n};\n\nexport default ProposalList;\n","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Card } from \"react-bootstrap\";\nimport AddProposal from \"./AddProposal\";\nimport {\n  useFetchProposalsList,\n  useFetchWinnerId,\n} from \"../../states/proposals/hooks\";\nimport ProposalList from \"./ProposalList\";\nimport { addProposalVote } from \"../../states/proposals/proposalSlice\";\nimport { useContract } from \"../../hooks/useContract\";\nimport { addUserHasVote } from \"../../states/contract/contractSlice\";\n\nconst Proposal = () => {\n  const dispatch = useDispatch();\n  const contract = useContract();\n  const workflowStatus = useSelector((state) => state.contract.status);\n  const userData = useSelector((state) => state.contract.userVoterData);\n  const proposalList = useSelector((state) => state.proposal.proposalList);\n  const winnerId = useSelector((state) => state.proposal.winnerId);\n\n  useFetchProposalsList();\n  useFetchWinnerId();\n\n  useEffect(() => {\n    if (contract !== null) {\n      contract.events.Voted().on(\"data\", async ({ returnValues }) => {\n        const { proposalId } = returnValues;\n        dispatch(addProposalVote(proposalId));\n        dispatch(addUserHasVote({ hasVoted: true, proposalId }));\n      });\n    }\n  }, [contract]);\n\n  const renderVoterData = () => {\n    if (workflowStatus === 3 && userData.isRegistered) {\n      return userData.hasVoted ? \"You have already voted\" : \"You can vote\";\n    }\n  };\n  return (\n    <Card>\n      <Card.Header>\n        Proposal part :{\"  \"} {renderVoterData()}{\" \"}\n        {workflowStatus === 5 && winnerId && (\n          <span className=\"fw-bold\">\n            The winner ({proposalList[winnerId].voteCount} vote(s)):{\" \"}\n            {proposalList[winnerId].description}\n          </span>\n        )}\n      </Card.Header>\n      <Card.Body>\n        {workflowStatus === 1 && userData.isRegistered && <AddProposal />}\n        {workflowStatus === 0 ? (\n          <Card.Title className=\"text-center\">\n            The voting campaign has not yet started. Come back late!\n          </Card.Title>\n        ) : (\n          <ProposalList />\n        )}\n      </Card.Body>\n    </Card>\n  );\n};\n\nexport default Proposal;\n","import { useDispatch, useSelector } from \"react-redux\";\nimport { useContract } from \"../../hooks/useContract\";\nimport { useEffect } from \"react\";\nimport { fetchProposalList, setWinnerProposalId } from \"./proposalSlice\";\nimport { serializeProposal } from \"../../utils/formatProposal\";\n\nexport const useFetchProposalsList = () => {\n  const dispatch = useDispatch();\n  const contract = useContract();\n  useEffect(() => {\n    const getProposalList = async () => {\n      const res = await contract.methods.getProposals().call();\n      const proposals = res.map((proposal) => {\n        return serializeProposal(proposal);\n      });\n      dispatch(fetchProposalList(proposals));\n    };\n    if (contract !== null) {\n      getProposalList();\n    }\n  }, [contract, dispatch]);\n};\n\nexport const useFetchWinnerId = () => {\n  const dispatch = useDispatch();\n  const contract = useContract();\n  const workflowStatus = useSelector((state) => state.contract.status);\n  useEffect(() => {\n    const getWinnerProposalId = async () => {\n      const winnerId = await contract.methods.getWinningProposalId().call();\n      dispatch(setWinnerProposalId({ winnerId }));\n    };\n    if (contract !== null && workflowStatus === 5) {\n      getWinnerProposalId();\n    }\n  }, [contract, dispatch, workflowStatus]);\n};\n","import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { useEagerConnect, useInactiveListener } from \"../hooks/web3\";\nimport {\n  useFetchOwner,\n  useFetchWhitelistedAddr,\n  useFetchWorkflowStatus,\n  useIsOwner,\n  useUserData,\n} from \"../states/contract/hooks\";\nimport { Container } from \"react-bootstrap\";\n\nimport Admin from \"./Admin\";\nimport Header from \"./Header\";\nimport Proposal from \"./Proposal\";\n\nconst App = () => {\n  // handle logic to eagerly connect to the injected ethereum provider, if it exists and has granted access already\n  const triedEager = useEagerConnect();\n  // handle logic to connect in reaction to certain events on the injected ethereum provider, if it exists\n  useInactiveListener(!triedEager);\n  useFetchOwner();\n  useFetchWhitelistedAddr();\n  useFetchWorkflowStatus();\n  useUserData();\n  const isOwner = useIsOwner();\n  return (\n    <>\n      <Header />\n      <Container style={{ marginTop: \"24px\" }}>\n        {isOwner && <Admin />}\n        <Proposal />\n      </Container>\n    </>\n  );\n};\nexport default App;\n","import { useState, useEffect } from \"react\";\nimport { useWeb3React } from \"@web3-react/core\";\n\nimport { injected } from \"../utils/web3React\";\n\nexport function useEagerConnect() {\n  const { activate, active } = useWeb3React();\n  const [tried, setTried] = useState(false);\n\n  useEffect(() => {\n    injected.isAuthorized().then((isAuthorized) => {\n      if (isAuthorized) {\n        activate(injected, undefined, true).catch(() => {\n          setTried(true);\n        });\n      } else if (window.ethereum) {\n        activate(injected, undefined, true).catch(() => {\n          setTried(true);\n        });\n      } else {\n        setTried(true);\n      }\n    });\n  }, []); // intentionally only running on mount (make sure it's only mounted once :))\n\n  // if the connection worked, wait until we get confirmation of that to flip the flag\n  useEffect(() => {\n    if (!tried && active) {\n      setTried(true);\n    }\n  }, [tried, active]);\n\n  return tried;\n}\n\nexport function useInactiveListener(suppress = false) {\n  const { active, error, activate } = useWeb3React();\n\n  useEffect(() => {\n    const { ethereum } = window;\n    if (ethereum && ethereum.on && !active && !error && !suppress) {\n      const handleConnect = () => {\n        console.log(\"Handling 'connect' event\");\n        activate(injected);\n      };\n      const handleChainChanged = (chainId) => {\n        console.log(\"Handling 'chainChanged' event with payload\", chainId);\n        activate(injected);\n      };\n      const handleAccountsChanged = (accounts) => {\n        console.log(\"Handling 'accountsChanged' event with payload\", accounts);\n        if (accounts.length > 0) {\n          activate(injected);\n        }\n      };\n      const handleNetworkChanged = (networkId) => {\n        console.log(\"Handling 'networkChanged' event with payload\", networkId);\n        activate(injected);\n      };\n\n      ethereum.on(\"connect\", handleConnect);\n      ethereum.on(\"chainChanged\", handleChainChanged);\n      ethereum.on(\"accountsChanged\", handleAccountsChanged);\n      ethereum.on(\"networkChanged\", handleNetworkChanged);\n\n      return () => {\n        if (ethereum.removeListener) {\n          ethereum.removeListener(\"connect\", handleConnect);\n          ethereum.removeListener(\"chainChanged\", handleChainChanged);\n          ethereum.removeListener(\"accountsChanged\", handleAccountsChanged);\n          ethereum.removeListener(\"networkChanged\", handleNetworkChanged);\n        }\n      };\n    }\n  }, [active, error, suppress, activate]);\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Web3ReactProvider } from \"@web3-react/core\";\nimport { Provider } from \"react-redux\";\nimport { getLibrary } from \"./utils/web3React\";\nimport store from \"./states\";\nimport App from \"./components/App\";\n\nReactDOM.render(\n  <Web3ReactProvider getLibrary={getLibrary}>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </Web3ReactProvider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}