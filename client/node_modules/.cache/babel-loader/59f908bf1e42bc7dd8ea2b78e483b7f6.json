{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { injected } from \"../utils/web3React\";\nexport function useEagerConnect() {\n  _s();\n\n  const {\n    activate,\n    active\n  } = useWeb3React();\n  const [tried, setTried] = useState(false);\n  useEffect(() => {\n    injected.isAuthorized().then(isAuthorized => {\n      if (isAuthorized) {\n        activate(injected, undefined, true).catch(() => {\n          setTried(true);\n        });\n      } else if (window.ethereum) {\n        activate(injected, undefined, true).catch(() => {\n          setTried(true);\n        });\n      } else {\n        setTried(true);\n      }\n    });\n  }, []); // intentionally only running on mount (make sure it's only mounted once :))\n  // if the connection worked, wait until we get confirmation of that to flip the flag\n\n  useEffect(() => {\n    if (!tried && active) {\n      setTried(true);\n    }\n  }, [tried, active]);\n  return tried;\n}\n\n_s(useEagerConnect, \"GLh+9ege4oFDiozdAF2n3i5tC+o=\", false, function () {\n  return [useWeb3React];\n});\n\nexport function useInactiveListener(suppress = false) {\n  _s2();\n\n  const {\n    active,\n    error,\n    activate\n  } = useWeb3React();\n  useEffect(() => {\n    const {\n      ethereum\n    } = window;\n\n    if (ethereum && ethereum.on && !active && !error && !suppress) {\n      const handleConnect = () => {\n        console.log(\"Handling 'connect' event\");\n        activate(injected);\n      };\n\n      const handleChainChanged = chainId => {\n        console.log(\"Handling 'chainChanged' event with payload\", chainId);\n        activate(injected);\n      };\n\n      const handleAccountsChanged = accounts => {\n        console.log(\"Handling 'accountsChanged' event with payload\", accounts);\n\n        if (accounts.length > 0) {\n          activate(injected);\n        }\n      };\n\n      const handleNetworkChanged = networkId => {\n        console.log(\"Handling 'networkChanged' event with payload\", networkId);\n        activate(injected);\n      };\n\n      ethereum.on(\"connect\", handleConnect);\n      ethereum.on(\"chainChanged\", handleChainChanged);\n      ethereum.on(\"accountsChanged\", handleAccountsChanged);\n      ethereum.on(\"networkChanged\", handleNetworkChanged);\n      return () => {\n        if (ethereum.removeListener) {\n          ethereum.removeListener(\"connect\", handleConnect);\n          ethereum.removeListener(\"chainChanged\", handleChainChanged);\n          ethereum.removeListener(\"accountsChanged\", handleAccountsChanged);\n          ethereum.removeListener(\"networkChanged\", handleNetworkChanged);\n        }\n      };\n    }\n  }, [active, error, suppress, activate]);\n}\n\n_s2(useInactiveListener, \"tg+LUTCYzAVRTYzC32Q8yta1BMA=\", false, function () {\n  return [useWeb3React];\n});","map":{"version":3,"sources":["/Users/Xutyr/Documents/Lab/Dapp_example/client/src/hooks/web3.js"],"names":["useState","useEffect","useWeb3React","injected","useEagerConnect","activate","active","tried","setTried","isAuthorized","then","undefined","catch","window","ethereum","useInactiveListener","suppress","error","on","handleConnect","console","log","handleChainChanged","chainId","handleAccountsChanged","accounts","length","handleNetworkChanged","networkId","removeListener"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { useWeb3React } from \"@web3-react/core\";\n\nimport { injected } from \"../utils/web3React\";\n\nexport function useEagerConnect() {\n  const { activate, active } = useWeb3React();\n  const [tried, setTried] = useState(false);\n\n  useEffect(() => {\n    injected.isAuthorized().then((isAuthorized) => {\n      if (isAuthorized) {\n        activate(injected, undefined, true).catch(() => {\n          setTried(true);\n        });\n      } else if (window.ethereum) {\n        activate(injected, undefined, true).catch(() => {\n          setTried(true);\n        });\n      } else {\n        setTried(true);\n      }\n    });\n  }, []); // intentionally only running on mount (make sure it's only mounted once :))\n\n  // if the connection worked, wait until we get confirmation of that to flip the flag\n  useEffect(() => {\n    if (!tried && active) {\n      setTried(true);\n    }\n  }, [tried, active]);\n\n  return tried;\n}\n\nexport function useInactiveListener(suppress = false) {\n  const { active, error, activate } = useWeb3React();\n\n  useEffect(() => {\n    const { ethereum } = window;\n    if (ethereum && ethereum.on && !active && !error && !suppress) {\n      const handleConnect = () => {\n        console.log(\"Handling 'connect' event\");\n        activate(injected);\n      };\n      const handleChainChanged = (chainId) => {\n        console.log(\"Handling 'chainChanged' event with payload\", chainId);\n        activate(injected);\n      };\n      const handleAccountsChanged = (accounts) => {\n        console.log(\"Handling 'accountsChanged' event with payload\", accounts);\n        if (accounts.length > 0) {\n          activate(injected);\n        }\n      };\n      const handleNetworkChanged = (networkId) => {\n        console.log(\"Handling 'networkChanged' event with payload\", networkId);\n        activate(injected);\n      };\n\n      ethereum.on(\"connect\", handleConnect);\n      ethereum.on(\"chainChanged\", handleChainChanged);\n      ethereum.on(\"accountsChanged\", handleAccountsChanged);\n      ethereum.on(\"networkChanged\", handleNetworkChanged);\n\n      return () => {\n        if (ethereum.removeListener) {\n          ethereum.removeListener(\"connect\", handleConnect);\n          ethereum.removeListener(\"chainChanged\", handleChainChanged);\n          ethereum.removeListener(\"accountsChanged\", handleAccountsChanged);\n          ethereum.removeListener(\"networkChanged\", handleNetworkChanged);\n        }\n      };\n    }\n  }, [active, error, suppress, activate]);\n}\n"]},"metadata":{},"sourceType":"module"}