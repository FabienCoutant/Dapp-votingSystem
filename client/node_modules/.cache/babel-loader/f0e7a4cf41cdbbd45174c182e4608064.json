{"ast":null,"code":"var _jsxFileName = \"/Users/Xutyr/Documents/Lab/Dapp_example/client/src/components/Admin/index.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useContract } from \"../../hooks/useContract\";\nimport { useIsOwner } from \"../../states/contract/hooks\";\nimport { Card, Button } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { updateWorkflowStatus } from \"../../states/contract/contractSlice\";\nimport AddWhitelist from \"./AddWhitelist\";\nimport ListWhitelist from \"./ListWhitelist\";\nimport { setWinnerProposalId } from \"../../states/proposals/proposalSlice\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Admin = () => {\n  _s();\n\n  const contract = useContract();\n  const {\n    account\n  } = useWeb3React();\n  const dispatch = useDispatch();\n  const isOwner = useIsOwner();\n  const workflowStatus = useSelector(state => state.contract.status);\n\n  const handleOnClick = async () => {\n    if (contract !== null && isOwner && workflowStatus < 4) {\n      const res = await contract.methods.nextWorkflowStatus().send({\n        from: account\n      });\n    }\n\n    if (contract !== null && isOwner && workflowStatus === 4) {\n      await contract.methods.results().send({\n        from: account\n      });\n    }\n  };\n\n  contract.events.WorkflowStatusChange().on(\"data\", ({\n    returnValues\n  }) => {\n    dispatch(updateWorkflowStatus(parseInt(returnValues[\"newStatus\"])));\n  });\n  contract.events.VotesTallied().on(\"data\", async () => {\n    const winnerId = await contract.methods.getWinningProposalId().call();\n    dispatch(setWinnerProposalId({\n      winnerId\n    }));\n  });\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: \"mb-4\",\n    children: [/*#__PURE__*/_jsxDEV(Card.Header, {\n      children: [\"Admin panel :\", \"  \", workflowStatus !== 5 && /*#__PURE__*/_jsxDEV(Button, {\n        className: \"btn btn-primary\",\n        onClick: handleOnClick,\n        disabled: workflowStatus === 5,\n        size: \"sm\",\n        children: workflowStatus < 4 ? \"Next Workflow\" : \"Call Result\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n      children: [workflowStatus === 0 && /*#__PURE__*/_jsxDEV(AddWhitelist, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 34\n      }, this), /*#__PURE__*/_jsxDEV(ListWhitelist, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Admin, \"e7zMoSgsbyKowpU6BjTPaqVXNyc=\", false, function () {\n  return [useContract, useWeb3React, useDispatch, useIsOwner, useSelector];\n});\n\n_c = Admin;\nexport default Admin;\n\nvar _c;\n\n$RefreshReg$(_c, \"Admin\");","map":{"version":3,"sources":["/Users/Xutyr/Documents/Lab/Dapp_example/client/src/components/Admin/index.js"],"names":["React","useContract","useIsOwner","Card","Button","useDispatch","useSelector","useWeb3React","updateWorkflowStatus","AddWhitelist","ListWhitelist","setWinnerProposalId","Admin","contract","account","dispatch","isOwner","workflowStatus","state","status","handleOnClick","res","methods","nextWorkflowStatus","send","from","results","events","WorkflowStatusChange","on","returnValues","parseInt","VotesTallied","winnerId","getWinningProposalId","call"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { useContract } from \"../../hooks/useContract\";\nimport { useIsOwner } from \"../../states/contract/hooks\";\nimport { Card, Button } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { updateWorkflowStatus } from \"../../states/contract/contractSlice\";\nimport AddWhitelist from \"./AddWhitelist\";\nimport ListWhitelist from \"./ListWhitelist\";\nimport { setWinnerProposalId } from \"../../states/proposals/proposalSlice\";\n\nconst Admin = () => {\n  const contract = useContract();\n  const { account } = useWeb3React();\n  const dispatch = useDispatch();\n  const isOwner = useIsOwner();\n  const workflowStatus = useSelector((state) => state.contract.status);\n\n  const handleOnClick = async () => {\n    if (contract !== null && isOwner && workflowStatus < 4) {\n      const res = await contract.methods\n        .nextWorkflowStatus()\n        .send({ from: account });\n    }\n    if (contract !== null && isOwner && workflowStatus === 4) {\n      await contract.methods.results().send({ from: account });\n    }\n  };\n\n  contract.events.WorkflowStatusChange().on(\"data\", ({ returnValues }) => {\n    dispatch(updateWorkflowStatus(parseInt(returnValues[\"newStatus\"])));\n  });\n\n  contract.events.VotesTallied().on(\"data\", async () => {\n    const winnerId = await contract.methods.getWinningProposalId().call();\n    dispatch(setWinnerProposalId({ winnerId }));\n  });\n\n  return (\n    <Card className=\"mb-4\">\n      <Card.Header>\n        Admin panel :{\"  \"}\n        {workflowStatus !== 5 && (\n          <Button\n            className=\"btn btn-primary\"\n            onClick={handleOnClick}\n            disabled={workflowStatus === 5}\n            size=\"sm\"\n          >\n            {workflowStatus < 4 ? \"Next Workflow\" : \"Call Result\"}\n          </Button>\n        )}\n      </Card.Header>\n      <Card.Body>\n        {workflowStatus === 0 && <AddWhitelist />}\n        <ListWhitelist />\n      </Card.Body>\n    </Card>\n  );\n};\n\nexport default Admin;\n"]},"metadata":{},"sourceType":"module"}