{"ast":null,"code":"var _jsxFileName = \"/Users/Xutyr/Documents/Lab/Dapp_example/client/src/components/Admin/AddWhitelist.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Form, Button, Alert, Col, Row } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { useContract } from \"../../hooks/useContract\";\nimport { addWhitelistAddress } from \"../../states/contract/contractSlice\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst AddWhitelist = () => {\n  _s();\n\n  const {\n    account\n  } = useWeb3React();\n  const contract = useContract();\n  const dispatch = useDispatch();\n  const whitelistedAddresses = useSelector(state => state.contract.whitelistedList);\n  const [error, setError] = useState(\"\");\n  useEffect(() => {\n    if (contract !== null) {\n      contract.events.VoterRegistered().on(\"data\", ({\n        returnValues\n      }) => {\n        const newWhitelist = returnValues[\"voterAddress\"];\n\n        if (!whitelistedAddresses.includes(newWhitelist)) {\n          const isAlsoOwner = newWhitelist === account;\n          dispatch(addWhitelistAddress({\n            newWhitelist,\n            isAlsoOwner\n          }));\n        }\n      });\n    }\n  }, [contract]);\n\n  const addWhitelist = async event => {\n    event.preventDefault();\n    const address = event.target.address.value;\n\n    if (!whitelistedAddresses.includes(address)) {\n      setError(\"\");\n      await contract.methods.addNewVoter(address).send({\n        from: account\n      });\n    } else setError(`${address} is already whitelisted`);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [error !== \"\" && /*#__PURE__*/_jsxDEV(Alert, {\n      variant: \"danger\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 24\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: addWhitelist,\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          children: /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"text\",\n            id: \"address\",\n            placeholder: \"@\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            variant: \"success\",\n            children: \"Whitelist\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(AddWhitelist, \"+nlyolVlIGsVLR+uRO3hpSRlFcc=\", false, function () {\n  return [useWeb3React, useContract, useDispatch, useSelector];\n});\n\n_c = AddWhitelist;\nexport default AddWhitelist;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddWhitelist\");","map":{"version":3,"sources":["/Users/Xutyr/Documents/Lab/Dapp_example/client/src/components/Admin/AddWhitelist.js"],"names":["React","useEffect","useState","Form","Button","Alert","Col","Row","useDispatch","useSelector","useWeb3React","useContract","addWhitelistAddress","AddWhitelist","account","contract","dispatch","whitelistedAddresses","state","whitelistedList","error","setError","events","VoterRegistered","on","returnValues","newWhitelist","includes","isAlsoOwner","addWhitelist","event","preventDefault","address","target","value","methods","addNewVoter","send","from"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Form, Button, Alert, Col, Row } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { useContract } from \"../../hooks/useContract\";\nimport { addWhitelistAddress } from \"../../states/contract/contractSlice\";\n\nconst AddWhitelist = () => {\n  const { account } = useWeb3React();\n  const contract = useContract();\n  const dispatch = useDispatch();\n  const whitelistedAddresses = useSelector(\n    (state) => state.contract.whitelistedList\n  );\n  const [error, setError] = useState(\"\");\n\n  useEffect(() => {\n    if (contract !== null) {\n      contract.events.VoterRegistered().on(\"data\", ({ returnValues }) => {\n        const newWhitelist = returnValues[\"voterAddress\"];\n        if (!whitelistedAddresses.includes(newWhitelist)) {\n          const isAlsoOwner = newWhitelist === account;\n          dispatch(addWhitelistAddress({ newWhitelist, isAlsoOwner }));\n        }\n      });\n    }\n  }, [contract]);\n\n  const addWhitelist = async (event) => {\n    event.preventDefault();\n    const address = event.target.address.value;\n    if (!whitelistedAddresses.includes(address)) {\n      setError(\"\");\n      await contract.methods.addNewVoter(address).send({ from: account });\n    } else setError(`${address} is already whitelisted`);\n  };\n\n  return (\n    <>\n      {error !== \"\" && <Alert variant=\"danger\">{error}</Alert>}\n      <Form onSubmit={addWhitelist}>\n        <Row>\n          <Col>\n            <Form.Control type=\"text\" id=\"address\" placeholder=\"@\" />\n          </Col>\n          <Col>\n            <Button type=\"submit\" variant=\"success\">\n              Whitelist\n            </Button>\n          </Col>\n        </Row>\n      </Form>\n      <br />\n    </>\n  );\n};\nexport default AddWhitelist;\n"]},"metadata":{},"sourceType":"module"}