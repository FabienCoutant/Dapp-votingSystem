{"ast":null,"code":"var _jsxFileName = \"/Users/Xutyr/Documents/Lab/Dapp_example/client/src/components/Proposal/AddProposal.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Form, Button, Alert, Col, Row } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { useContract } from \"../../hooks/useContract\";\nimport { serializeProposal, serializeProposalDescription } from \"../../utils/formatProposal\";\nimport { addProposal } from \"../../states/proposals/proposalSlice\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst AddWhitelist = () => {\n  _s();\n\n  const {\n    account\n  } = useWeb3React();\n  const contract = useContract();\n  const dispatch = useDispatch();\n  const proposalList = useSelector(state => state.proposal.proposalList);\n  const userData = useSelector(state => state.contract.proposalList);\n  const [error, setError] = useState(\"\");\n  useEffect(() => {\n    if (contract !== null) {\n      contract.events.ProposalRegistered().on(\"data\", async ({\n        returnValues\n      }) => {\n        const newProposal = returnValues[\"proposalId\"];\n\n        if (!proposalList.some(proposal => proposal.description === newProposal)) {\n          const proposal = await contract.methods.getProposalById(newProposal).call();\n          dispatch(addProposal(serializeProposal(proposal)));\n        }\n      });\n    }\n  }, [contract]);\n\n  const onSubmitProposal = async event => {\n    event.preventDefault();\n    const description = serializeProposalDescription(event.target.description.value);\n\n    if (!proposalList.some(proposal => proposal.description === description)) {\n      setError(\"\");\n      await contract.methods.addProposal(description).send({\n        from: account\n      });\n    } else setError(`${description} is already proposed`);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [error !== \"\" && /*#__PURE__*/_jsxDEV(Alert, {\n      variant: \"danger\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 24\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: onSubmitProposal,\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          children: /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"text\",\n            id: \"description\",\n            placeholder: \"Description of your proposal\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            variant: \"success\",\n            children: \"New Proposal\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(AddWhitelist, \"ZnDpGo6Ryg9+GJf0broPEAZDhWw=\", false, function () {\n  return [useWeb3React, useContract, useDispatch, useSelector, useSelector];\n});\n\n_c = AddWhitelist;\nexport default AddWhitelist;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddWhitelist\");","map":{"version":3,"sources":["/Users/Xutyr/Documents/Lab/Dapp_example/client/src/components/Proposal/AddProposal.js"],"names":["React","useEffect","useState","Form","Button","Alert","Col","Row","useDispatch","useSelector","useWeb3React","useContract","serializeProposal","serializeProposalDescription","addProposal","AddWhitelist","account","contract","dispatch","proposalList","state","proposal","userData","error","setError","events","ProposalRegistered","on","returnValues","newProposal","some","description","methods","getProposalById","call","onSubmitProposal","event","preventDefault","target","value","send","from"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,IAAT,EAAeC,MAAf,EAAuBC,KAAvB,EAA8BC,GAA9B,EAAmCC,GAAnC,QAA8C,iBAA9C;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,SAASC,WAAT,QAA4B,yBAA5B;AACA,SACEC,iBADF,EAEEC,4BAFF,QAGO,4BAHP;AAIA,SAASC,WAAT,QAA4B,sCAA5B;;;;AAEA,MAAMC,YAAY,GAAG,MAAM;AAAA;;AACzB,QAAM;AAAEC,IAAAA;AAAF,MAAcN,YAAY,EAAhC;AACA,QAAMO,QAAQ,GAAGN,WAAW,EAA5B;AACA,QAAMO,QAAQ,GAAGV,WAAW,EAA5B;AACA,QAAMW,YAAY,GAAGV,WAAW,CAAEW,KAAD,IAAWA,KAAK,CAACC,QAAN,CAAeF,YAA3B,CAAhC;AACA,QAAMG,QAAQ,GAAGb,WAAW,CAAEW,KAAD,IAAWA,KAAK,CAACH,QAAN,CAAeE,YAA3B,CAA5B;AACA,QAAM,CAACI,KAAD,EAAQC,QAAR,IAAoBtB,QAAQ,CAAC,EAAD,CAAlC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIgB,QAAQ,KAAK,IAAjB,EAAuB;AACrBA,MAAAA,QAAQ,CAACQ,MAAT,CACGC,kBADH,GAEGC,EAFH,CAEM,MAFN,EAEc,OAAO;AAAEC,QAAAA;AAAF,OAAP,KAA4B;AACtC,cAAMC,WAAW,GAAGD,YAAY,CAAC,YAAD,CAAhC;;AACA,YACE,CAACT,YAAY,CAACW,IAAb,CACET,QAAD,IAAcA,QAAQ,CAACU,WAAT,KAAyBF,WADxC,CADH,EAIE;AACA,gBAAMR,QAAQ,GAAG,MAAMJ,QAAQ,CAACe,OAAT,CACpBC,eADoB,CACJJ,WADI,EAEpBK,IAFoB,EAAvB;AAGAhB,UAAAA,QAAQ,CAACJ,WAAW,CAACF,iBAAiB,CAACS,QAAD,CAAlB,CAAZ,CAAR;AACD;AACF,OAdH;AAeD;AACF,GAlBQ,EAkBN,CAACJ,QAAD,CAlBM,CAAT;;AAoBA,QAAMkB,gBAAgB,GAAG,MAAOC,KAAP,IAAiB;AACxCA,IAAAA,KAAK,CAACC,cAAN;AACA,UAAMN,WAAW,GAAGlB,4BAA4B,CAC9CuB,KAAK,CAACE,MAAN,CAAaP,WAAb,CAAyBQ,KADqB,CAAhD;;AAGA,QACE,CAACpB,YAAY,CAACW,IAAb,CAAmBT,QAAD,IAAcA,QAAQ,CAACU,WAAT,KAAyBA,WAAzD,CADH,EAEE;AACAP,MAAAA,QAAQ,CAAC,EAAD,CAAR;AACA,YAAMP,QAAQ,CAACe,OAAT,CAAiBlB,WAAjB,CAA6BiB,WAA7B,EAA0CS,IAA1C,CAA+C;AAAEC,QAAAA,IAAI,EAAEzB;AAAR,OAA/C,CAAN;AACD,KALD,MAKOQ,QAAQ,CAAE,GAAEO,WAAY,sBAAhB,CAAR;AACR,GAXD;;AAaA,sBACE;AAAA,eACGR,KAAK,KAAK,EAAV,iBAAgB,QAAC,KAAD;AAAO,MAAA,OAAO,EAAC,QAAf;AAAA,gBAAyBA;AAAzB;AAAA;AAAA;AAAA;AAAA,YADnB,eAEE,QAAC,IAAD;AAAM,MAAA,QAAQ,EAAEY,gBAAhB;AAAA,6BACE,QAAC,GAAD;AAAA,gCACE,QAAC,GAAD;AAAA,iCACE,QAAC,IAAD,CAAM,OAAN;AACE,YAAA,IAAI,EAAC,MADP;AAEE,YAAA,EAAE,EAAC,aAFL;AAGE,YAAA,WAAW,EAAC;AAHd;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADF,eAQE,QAAC,GAAD;AAAA,iCACE,QAAC,MAAD;AAAQ,YAAA,IAAI,EAAC,QAAb;AAAsB,YAAA,OAAO,EAAC,SAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBARF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAFF,eAkBE;AAAA;AAAA;AAAA;AAAA,YAlBF;AAAA,kBADF;AAsBD,CA/DD;;GAAMpB,Y;UACgBL,Y,EACHC,W,EACAH,W,EACIC,W,EACJA,W;;;KALbM,Y;AAgEN,eAAeA,YAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Form, Button, Alert, Col, Row } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { useContract } from \"../../hooks/useContract\";\nimport {\n  serializeProposal,\n  serializeProposalDescription,\n} from \"../../utils/formatProposal\";\nimport { addProposal } from \"../../states/proposals/proposalSlice\";\n\nconst AddWhitelist = () => {\n  const { account } = useWeb3React();\n  const contract = useContract();\n  const dispatch = useDispatch();\n  const proposalList = useSelector((state) => state.proposal.proposalList);\n  const userData = useSelector((state) => state.contract.proposalList);\n  const [error, setError] = useState(\"\");\n\n  useEffect(() => {\n    if (contract !== null) {\n      contract.events\n        .ProposalRegistered()\n        .on(\"data\", async ({ returnValues }) => {\n          const newProposal = returnValues[\"proposalId\"];\n          if (\n            !proposalList.some(\n              (proposal) => proposal.description === newProposal\n            )\n          ) {\n            const proposal = await contract.methods\n              .getProposalById(newProposal)\n              .call();\n            dispatch(addProposal(serializeProposal(proposal)));\n          }\n        });\n    }\n  }, [contract]);\n\n  const onSubmitProposal = async (event) => {\n    event.preventDefault();\n    const description = serializeProposalDescription(\n      event.target.description.value\n    );\n    if (\n      !proposalList.some((proposal) => proposal.description === description)\n    ) {\n      setError(\"\");\n      await contract.methods.addProposal(description).send({ from: account });\n    } else setError(`${description} is already proposed`);\n  };\n\n  return (\n    <>\n      {error !== \"\" && <Alert variant=\"danger\">{error}</Alert>}\n      <Form onSubmit={onSubmitProposal}>\n        <Row>\n          <Col>\n            <Form.Control\n              type=\"text\"\n              id=\"description\"\n              placeholder=\"Description of your proposal\"\n            />\n          </Col>\n          <Col>\n            <Button type=\"submit\" variant=\"success\">\n              New Proposal\n            </Button>\n          </Col>\n        </Row>\n      </Form>\n      <br />\n    </>\n  );\n};\nexport default AddWhitelist;\n"]},"metadata":{},"sourceType":"module"}