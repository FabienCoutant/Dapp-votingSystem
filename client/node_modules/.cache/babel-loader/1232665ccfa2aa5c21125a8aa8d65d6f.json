{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useContract } from \"../../hooks/useContract\";\nimport { useEffect } from \"react\";\nimport { fetchProposalList, setWinnerProposalId } from \"./proposalSlice\";\nimport { serializeProposal } from \"../../utils/formatProposal\";\nexport const useFetchProposalsList = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const contract = useContract();\n  useEffect(() => {\n    const getProposalList = async () => {\n      const res = await contract.methods.getProposals().call();\n      const proposals = res.map(proposal => {\n        return serializeProposal(proposal);\n      });\n      dispatch(fetchProposalList(proposals));\n    };\n\n    if (contract !== null) {\n      getProposalList();\n    }\n  }, [contract, dispatch]);\n};\n\n_s(useFetchProposalsList, \"DUNU0jG9PPCpNWb06gx0jSnOYgU=\", false, function () {\n  return [useDispatch, useContract];\n});\n\nexport const useFetchWinnerId = () => {\n  _s2();\n\n  const dispatch = useDispatch();\n  const contract = useContract();\n  const workflowStatus = useSelector(state => state.contract.status);\n  useEffect(() => {\n    const getWinnerProposalId = async () => {\n      const winnerId = await contract.methods.getWinningProposalId().call();\n      dispatch(setWinnerProposalId({\n        winnerId\n      }));\n    };\n\n    if (contract !== null && workflowStatus === 5) {\n      getWinnerProposalId();\n    }\n  }, [contract, dispatch, workflowStatus]);\n};\n\n_s2(useFetchWinnerId, \"aPsqvrzGmJ+xDt8qeNM/sK0Qf60=\", false, function () {\n  return [useDispatch, useContract, useSelector];\n});","map":{"version":3,"sources":["/Users/Xutyr/Documents/Lab/Dapp_example/client/src/states/proposals/hooks.js"],"names":["useDispatch","useSelector","useContract","useEffect","fetchProposalList","setWinnerProposalId","serializeProposal","useFetchProposalsList","dispatch","contract","getProposalList","res","methods","getProposals","call","proposals","map","proposal","useFetchWinnerId","workflowStatus","state","status","getWinnerProposalId","winnerId","getWinningProposalId"],"mappings":";;;AAAA,SAASA,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,WAAT,QAA4B,yBAA5B;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,iBAAT,EAA4BC,mBAA5B,QAAuD,iBAAvD;AACA,SAASC,iBAAT,QAAkC,4BAAlC;AAEA,OAAO,MAAMC,qBAAqB,GAAG,MAAM;AAAA;;AACzC,QAAMC,QAAQ,GAAGR,WAAW,EAA5B;AACA,QAAMS,QAAQ,GAAGP,WAAW,EAA5B;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMO,eAAe,GAAG,YAAY;AAClC,YAAMC,GAAG,GAAG,MAAMF,QAAQ,CAACG,OAAT,CAAiBC,YAAjB,GAAgCC,IAAhC,EAAlB;AACA,YAAMC,SAAS,GAAGJ,GAAG,CAACK,GAAJ,CAASC,QAAD,IAAc;AACtC,eAAOX,iBAAiB,CAACW,QAAD,CAAxB;AACD,OAFiB,CAAlB;AAGAT,MAAAA,QAAQ,CAACJ,iBAAiB,CAACW,SAAD,CAAlB,CAAR;AACD,KAND;;AAOA,QAAIN,QAAQ,KAAK,IAAjB,EAAuB;AACrBC,MAAAA,eAAe;AAChB;AACF,GAXQ,EAWN,CAACD,QAAD,EAAWD,QAAX,CAXM,CAAT;AAYD,CAfM;;GAAMD,qB;UACMP,W,EACAE,W;;;AAenB,OAAO,MAAMgB,gBAAgB,GAAG,MAAM;AAAA;;AACpC,QAAMV,QAAQ,GAAGR,WAAW,EAA5B;AACA,QAAMS,QAAQ,GAAGP,WAAW,EAA5B;AACA,QAAMiB,cAAc,GAAGlB,WAAW,CAAEmB,KAAD,IAAWA,KAAK,CAACX,QAAN,CAAeY,MAA3B,CAAlC;AACAlB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMmB,mBAAmB,GAAG,YAAY;AACtC,YAAMC,QAAQ,GAAG,MAAMd,QAAQ,CAACG,OAAT,CAAiBY,oBAAjB,GAAwCV,IAAxC,EAAvB;AACAN,MAAAA,QAAQ,CAACH,mBAAmB,CAAC;AAAEkB,QAAAA;AAAF,OAAD,CAApB,CAAR;AACD,KAHD;;AAIA,QAAId,QAAQ,KAAK,IAAb,IAAqBU,cAAc,KAAK,CAA5C,EAA+C;AAC7CG,MAAAA,mBAAmB;AACpB;AACF,GARQ,EAQN,CAACb,QAAD,EAAWD,QAAX,EAAqBW,cAArB,CARM,CAAT;AASD,CAbM;;IAAMD,gB;UACMlB,W,EACAE,W,EACMD,W","sourcesContent":["import { useDispatch, useSelector } from \"react-redux\";\nimport { useContract } from \"../../hooks/useContract\";\nimport { useEffect } from \"react\";\nimport { fetchProposalList, setWinnerProposalId } from \"./proposalSlice\";\nimport { serializeProposal } from \"../../utils/formatProposal\";\n\nexport const useFetchProposalsList = () => {\n  const dispatch = useDispatch();\n  const contract = useContract();\n  useEffect(() => {\n    const getProposalList = async () => {\n      const res = await contract.methods.getProposals().call();\n      const proposals = res.map((proposal) => {\n        return serializeProposal(proposal);\n      });\n      dispatch(fetchProposalList(proposals));\n    };\n    if (contract !== null) {\n      getProposalList();\n    }\n  }, [contract, dispatch]);\n};\n\nexport const useFetchWinnerId = () => {\n  const dispatch = useDispatch();\n  const contract = useContract();\n  const workflowStatus = useSelector((state) => state.contract.status);\n  useEffect(() => {\n    const getWinnerProposalId = async () => {\n      const winnerId = await contract.methods.getWinningProposalId().call();\n      dispatch(setWinnerProposalId({ winnerId }));\n    };\n    if (contract !== null && workflowStatus === 5) {\n      getWinnerProposalId();\n    }\n  }, [contract, dispatch, workflowStatus]);\n};\n"]},"metadata":{},"sourceType":"module"}