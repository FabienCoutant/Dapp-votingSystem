{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$(),\n    _s6 = $RefreshSig$();\n\nimport { useEffect, useMemo } from \"react\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useContract } from \"../../hooks/useContract\";\nimport { fetchOwner, fetchWhitelistedList, fetchUserVoterData, updateWorkflowStatus } from \"./contractSlice\";\nimport { serializeVoter } from \"../../utils/formatProposal\";\nexport const useFetchOwner = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const contract = useContract();\n  useEffect(() => {\n    const getOwner = async () => {\n      const res = await contract.methods.owner().call();\n      dispatch(fetchOwner(res));\n    };\n\n    if (contract !== null) {\n      getOwner();\n    }\n  }, [contract, dispatch]);\n};\n\n_s(useFetchOwner, \"DUNU0jG9PPCpNWb06gx0jSnOYgU=\", false, function () {\n  return [useDispatch, useContract];\n});\n\nexport const useIsOwner = () => {\n  _s2();\n\n  const {\n    account\n  } = useWeb3React();\n  const owner = useSelector(state => state.contract.owner);\n  return useMemo(() => owner === account, [account, owner]);\n};\n\n_s2(useIsOwner, \"Od9/eHLzhVAzwTaCKkU0/TlR/z4=\", false, function () {\n  return [useWeb3React, useSelector];\n});\n\nexport const useIsWhitelisted = () => {\n  _s3();\n\n  const {\n    account\n  } = useWeb3React();\n  const isRegistered = useSelector(state => state.contract.userVoterData.isRegistered);\n  return useMemo(() => isRegistered === account, [account, isRegistered]);\n};\n\n_s3(useIsWhitelisted, \"NzPof1xepFnGYwbiMvriaqbr4wE=\", false, function () {\n  return [useWeb3React, useSelector];\n});\n\nexport const useUserData = () => {\n  _s4();\n\n  const dispatch = useDispatch();\n  const {\n    account\n  } = useWeb3React();\n  const contract = useContract();\n  useEffect(() => {\n    const getVoterData = async () => {\n      const res = await contract.methods.getVoterInfoByAddress(account).call();\n      dispatch(fetchUserVoterData(serializeVoter(res)));\n    };\n\n    if (contract !== null) {\n      getVoterData();\n    }\n  }, [contract, account, dispatch]);\n};\n\n_s4(useUserData, \"D0QiNHvPIGam395Rq5mF79khuCc=\", false, function () {\n  return [useDispatch, useWeb3React, useContract];\n});\n\nexport const useFetchWhitelistedAddr = () => {\n  _s5();\n\n  const dispatch = useDispatch();\n  const contract = useContract();\n  useEffect(() => {\n    const getWhitelistedAddresses = async () => {\n      const res = await contract.methods.getListOfWhitelist().call();\n      const whitelisted = res.filter(async user => {\n        const r = await contract.methods.getVoterInfoByAddress(user).call();\n        return r.isRegistered;\n      });\n      dispatch(fetchWhitelistedList(whitelisted));\n    };\n\n    if (contract !== null) {\n      getWhitelistedAddresses();\n    }\n  }, [contract, dispatch]);\n};\n\n_s5(useFetchWhitelistedAddr, \"DUNU0jG9PPCpNWb06gx0jSnOYgU=\", false, function () {\n  return [useDispatch, useContract];\n});\n\nexport const useFetchWorkflowStatus = () => {\n  _s6();\n\n  const dispatch = useDispatch();\n  const contract = useContract();\n  useEffect(() => {\n    const getWorkflowStatus = async () => {\n      const res = parseInt(await contract.methods.getCurrentStatus().call());\n      dispatch(updateWorkflowStatus(res));\n    };\n\n    if (contract !== null) {\n      getWorkflowStatus();\n    }\n  }, [contract, dispatch]);\n};\n\n_s6(useFetchWorkflowStatus, \"DUNU0jG9PPCpNWb06gx0jSnOYgU=\", false, function () {\n  return [useDispatch, useContract];\n});","map":{"version":3,"sources":["/Users/Xutyr/Documents/Lab/Dapp_example/client/src/states/contract/hooks.js"],"names":["useEffect","useMemo","useWeb3React","useDispatch","useSelector","useContract","fetchOwner","fetchWhitelistedList","fetchUserVoterData","updateWorkflowStatus","serializeVoter","useFetchOwner","dispatch","contract","getOwner","res","methods","owner","call","useIsOwner","account","state","useIsWhitelisted","isRegistered","userVoterData","useUserData","getVoterData","getVoterInfoByAddress","useFetchWhitelistedAddr","getWhitelistedAddresses","getListOfWhitelist","whitelisted","filter","user","r","useFetchWorkflowStatus","getWorkflowStatus","parseInt","getCurrentStatus"],"mappings":"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","sourcesContent":["import { useEffect, useMemo } from \"react\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useContract } from \"../../hooks/useContract\";\nimport {\n  fetchOwner,\n  fetchWhitelistedList,\n  fetchUserVoterData,\n  updateWorkflowStatus,\n} from \"./contractSlice\";\nimport { serializeVoter } from \"../../utils/formatProposal\";\n\nexport const useFetchOwner = () => {\n  const dispatch = useDispatch();\n  const contract = useContract();\n  useEffect(() => {\n    const getOwner = async () => {\n      const res = await contract.methods.owner().call();\n      dispatch(fetchOwner(res));\n    };\n    if (contract !== null) {\n      getOwner();\n    }\n  }, [contract, dispatch]);\n};\n\nexport const useIsOwner = () => {\n  const { account } = useWeb3React();\n  const owner = useSelector((state) => state.contract.owner);\n  return useMemo(() => owner === account, [account, owner]);\n};\nexport const useIsWhitelisted = () => {\n  const { account } = useWeb3React();\n  const isRegistered = useSelector(\n    (state) => state.contract.userVoterData.isRegistered\n  );\n  return useMemo(() => isRegistered === account, [account, isRegistered]);\n};\n\nexport const useUserData = () => {\n  const dispatch = useDispatch();\n  const { account } = useWeb3React();\n  const contract = useContract();\n  useEffect(() => {\n    const getVoterData = async () => {\n      const res = await contract.methods.getVoterInfoByAddress(account).call();\n      dispatch(fetchUserVoterData(serializeVoter(res)));\n    };\n    if (contract !== null) {\n      getVoterData();\n    }\n  }, [contract, account, dispatch]);\n};\n\nexport const useFetchWhitelistedAddr = () => {\n  const dispatch = useDispatch();\n  const contract = useContract();\n  useEffect(() => {\n    const getWhitelistedAddresses = async () => {\n      const res = await contract.methods.getListOfWhitelist().call();\n      const whitelisted = res.filter(async (user) => {\n        const r = await contract.methods.getVoterInfoByAddress(user).call();\n        return r.isRegistered;\n      });\n      dispatch(fetchWhitelistedList(whitelisted));\n    };\n    if (contract !== null) {\n      getWhitelistedAddresses();\n    }\n  }, [contract, dispatch]);\n};\n\nexport const useFetchWorkflowStatus = () => {\n  const dispatch = useDispatch();\n  const contract = useContract();\n  useEffect(() => {\n    const getWorkflowStatus = async () => {\n      const res = parseInt(await contract.methods.getCurrentStatus().call());\n      dispatch(updateWorkflowStatus(res));\n    };\n    if (contract !== null) {\n      getWorkflowStatus();\n    }\n  }, [contract, dispatch]);\n};\n"]},"metadata":{},"sourceType":"module"}