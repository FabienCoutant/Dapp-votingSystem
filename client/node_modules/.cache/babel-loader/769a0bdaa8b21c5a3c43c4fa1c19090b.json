{"ast":null,"code":"var _jsxFileName = \"/Users/Xutyr/Documents/Lab/Dapp_example/client/src/components/App.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { useEagerConnect, useInactiveListener } from \"../hooks/web3\";\nimport { useFetchOwner, useFetchWhitelistedAddr, useFetchWorkflowStatus, useIsOwner, useUserData } from \"../states/contract/hooks\";\nimport { Container } from \"react-bootstrap\";\nimport Admin from \"./Admin\";\nimport Header from \"./Header\";\nimport Proposal from \"./Proposal\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  // handle logic to eagerly connect to the injected ethereum provider, if it exists and has granted access already\n  const triedEager = useEagerConnect(); // handle logic to connect in reaction to certain events on the injected ethereum provider, if it exists\n\n  useInactiveListener(!triedEager);\n  useFetchOwner();\n  useFetchWhitelistedAddr();\n  useFetchWorkflowStatus();\n  useUserData();\n  const isOwner = useIsOwner();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      style: {\n        marginTop: \"24px\"\n      },\n      children: [isOwner && /*#__PURE__*/_jsxDEV(Admin, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Proposal, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(App, \"2lgstznUNRhG5DkbiaEA76ZZcZE=\", false, function () {\n  return [useEagerConnect, useInactiveListener, useFetchOwner, useFetchWhitelistedAddr, useFetchWorkflowStatus, useUserData, useIsOwner];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/Xutyr/Documents/Lab/Dapp_example/client/src/components/App.js"],"names":["React","useEagerConnect","useInactiveListener","useFetchOwner","useFetchWhitelistedAddr","useFetchWorkflowStatus","useIsOwner","useUserData","Container","Admin","Header","Proposal","App","triedEager","isOwner","marginTop"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,sCAAP;AACA,SAASC,eAAT,EAA0BC,mBAA1B,QAAqD,eAArD;AACA,SACEC,aADF,EAEEC,uBAFF,EAGEC,sBAHF,EAIEC,UAJF,EAKEC,WALF,QAMO,0BANP;AAOA,SAASC,SAAT,QAA0B,iBAA1B;AAEA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,QAAP,MAAqB,YAArB;;;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAChB;AACA,QAAMC,UAAU,GAAGZ,eAAe,EAAlC,CAFgB,CAGhB;;AACAC,EAAAA,mBAAmB,CAAC,CAACW,UAAF,CAAnB;AACAV,EAAAA,aAAa;AACbC,EAAAA,uBAAuB;AACvBC,EAAAA,sBAAsB;AACtBE,EAAAA,WAAW;AACX,QAAMO,OAAO,GAAGR,UAAU,EAA1B;AACA,sBACE;AAAA,4BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,SAAD;AAAW,MAAA,KAAK,EAAE;AAAES,QAAAA,SAAS,EAAE;AAAb,OAAlB;AAAA,iBACGD,OAAO,iBAAI,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA,cADd,eAEE,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA,kBADF;AASD,CAnBD;;GAAMF,G;UAEeX,e,EAEnBC,mB,EACAC,a,EACAC,uB,EACAC,sB,EACAE,W,EACgBD,U;;;KATZM,G;AAoBN,eAAeA,GAAf","sourcesContent":["import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { useEagerConnect, useInactiveListener } from \"../hooks/web3\";\nimport {\n  useFetchOwner,\n  useFetchWhitelistedAddr,\n  useFetchWorkflowStatus,\n  useIsOwner,\n  useUserData,\n} from \"../states/contract/hooks\";\nimport { Container } from \"react-bootstrap\";\n\nimport Admin from \"./Admin\";\nimport Header from \"./Header\";\nimport Proposal from \"./Proposal\";\n\nconst App = () => {\n  // handle logic to eagerly connect to the injected ethereum provider, if it exists and has granted access already\n  const triedEager = useEagerConnect();\n  // handle logic to connect in reaction to certain events on the injected ethereum provider, if it exists\n  useInactiveListener(!triedEager);\n  useFetchOwner();\n  useFetchWhitelistedAddr();\n  useFetchWorkflowStatus();\n  useUserData();\n  const isOwner = useIsOwner();\n  return (\n    <>\n      <Header />\n      <Container style={{ marginTop: \"24px\" }}>\n        {isOwner && <Admin />}\n        <Proposal />\n      </Container>\n    </>\n  );\n};\nexport default App;\n"]},"metadata":{},"sourceType":"module"}