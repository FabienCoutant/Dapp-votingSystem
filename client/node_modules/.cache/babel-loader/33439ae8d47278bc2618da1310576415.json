{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  owner: null,\n  status: 0,\n  userVoterData: {\n    hasVoted: false,\n    isRegistered: false,\n    votedProposalId: 0\n  },\n  whitelistedList: []\n};\nexport const contractSlice = createSlice({\n  name: \"contract\",\n  initialState,\n  reducers: {\n    fetchOwner: (state, action) => {\n      state.owner = action.payload;\n    },\n    updateWorkflowStatus: (state, action) => {\n      state.status = action.payload;\n    },\n    fetchUserVoterData: (state, action) => {\n      state.userVoterData = action.payload;\n    },\n    fetchWhitelistedList: (state, action) => {\n      state.whitelistedList = action.payload;\n    },\n    addWhitelistAddress: (state, action) => {\n      state.whitelistedList.push(action.payload.newWhitelist);\n\n      if (action.payload.isAlsoOwner) {\n        state.userVoterData.isRegistered = action.payload.isAlsoOwner;\n      }\n    },\n    addUserHasVote: (state, action) => {\n      state.userVoterData.hasVoted = action.payload.hasVoted;\n      state.userVoterData.votedProposalId = parseInt(action.payload.proposalId);\n    }\n  }\n});\nexport const {\n  fetchOwner,\n  updateWorkflowStatus,\n  fetchUserVoterData,\n  fetchWhitelistedList,\n  addWhitelistAddress,\n  addUserHasVote\n} = contractSlice.actions;\nexport default contractSlice.reducer;","map":{"version":3,"sources":["/Users/Xutyr/Documents/Lab/Dapp_example/client/src/states/contract/contractSlice.js"],"names":["createSlice","initialState","owner","status","userVoterData","hasVoted","isRegistered","votedProposalId","whitelistedList","contractSlice","name","reducers","fetchOwner","state","action","payload","updateWorkflowStatus","fetchUserVoterData","fetchWhitelistedList","addWhitelistAddress","push","newWhitelist","isAlsoOwner","addUserHasVote","parseInt","proposalId","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,IADY;AAEnBC,EAAAA,MAAM,EAAE,CAFW;AAGnBC,EAAAA,aAAa,EAAE;AACbC,IAAAA,QAAQ,EAAE,KADG;AAEbC,IAAAA,YAAY,EAAE,KAFD;AAGbC,IAAAA,eAAe,EAAE;AAHJ,GAHI;AAQnBC,EAAAA,eAAe,EAAE;AARE,CAArB;AAWA,OAAO,MAAMC,aAAa,GAAGT,WAAW,CAAC;AACvCU,EAAAA,IAAI,EAAE,UADiC;AAEvCT,EAAAA,YAFuC;AAGvCU,EAAAA,QAAQ,EAAE;AACRC,IAAAA,UAAU,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC7BD,MAAAA,KAAK,CAACX,KAAN,GAAcY,MAAM,CAACC,OAArB;AACD,KAHO;AAIRC,IAAAA,oBAAoB,EAAE,CAACH,KAAD,EAAQC,MAAR,KAAmB;AACvCD,MAAAA,KAAK,CAACV,MAAN,GAAeW,MAAM,CAACC,OAAtB;AACD,KANO;AAORE,IAAAA,kBAAkB,EAAE,CAACJ,KAAD,EAAQC,MAAR,KAAmB;AACrCD,MAAAA,KAAK,CAACT,aAAN,GAAsBU,MAAM,CAACC,OAA7B;AACD,KATO;AAURG,IAAAA,oBAAoB,EAAE,CAACL,KAAD,EAAQC,MAAR,KAAmB;AACvCD,MAAAA,KAAK,CAACL,eAAN,GAAwBM,MAAM,CAACC,OAA/B;AACD,KAZO;AAaRI,IAAAA,mBAAmB,EAAE,CAACN,KAAD,EAAQC,MAAR,KAAmB;AACtCD,MAAAA,KAAK,CAACL,eAAN,CAAsBY,IAAtB,CAA2BN,MAAM,CAACC,OAAP,CAAeM,YAA1C;;AACA,UAAIP,MAAM,CAACC,OAAP,CAAeO,WAAnB,EAAgC;AAC9BT,QAAAA,KAAK,CAACT,aAAN,CAAoBE,YAApB,GAAmCQ,MAAM,CAACC,OAAP,CAAeO,WAAlD;AACD;AACF,KAlBO;AAmBRC,IAAAA,cAAc,EAAE,CAACV,KAAD,EAAQC,MAAR,KAAmB;AACjCD,MAAAA,KAAK,CAACT,aAAN,CAAoBC,QAApB,GAA+BS,MAAM,CAACC,OAAP,CAAeV,QAA9C;AACAQ,MAAAA,KAAK,CAACT,aAAN,CAAoBG,eAApB,GAAsCiB,QAAQ,CAACV,MAAM,CAACC,OAAP,CAAeU,UAAhB,CAA9C;AACD;AAtBO;AAH6B,CAAD,CAAjC;AA6BP,OAAO,MAAM;AACXb,EAAAA,UADW;AAEXI,EAAAA,oBAFW;AAGXC,EAAAA,kBAHW;AAIXC,EAAAA,oBAJW;AAKXC,EAAAA,mBALW;AAMXI,EAAAA;AANW,IAOTd,aAAa,CAACiB,OAPX;AASP,eAAejB,aAAa,CAACkB,OAA7B","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n  owner: null,\n  status: 0,\n  userVoterData: {\n    hasVoted: false,\n    isRegistered: false,\n    votedProposalId: 0,\n  },\n  whitelistedList: [],\n};\n\nexport const contractSlice = createSlice({\n  name: \"contract\",\n  initialState,\n  reducers: {\n    fetchOwner: (state, action) => {\n      state.owner = action.payload;\n    },\n    updateWorkflowStatus: (state, action) => {\n      state.status = action.payload;\n    },\n    fetchUserVoterData: (state, action) => {\n      state.userVoterData = action.payload;\n    },\n    fetchWhitelistedList: (state, action) => {\n      state.whitelistedList = action.payload;\n    },\n    addWhitelistAddress: (state, action) => {\n      state.whitelistedList.push(action.payload.newWhitelist);\n      if (action.payload.isAlsoOwner) {\n        state.userVoterData.isRegistered = action.payload.isAlsoOwner;\n      }\n    },\n    addUserHasVote: (state, action) => {\n      state.userVoterData.hasVoted = action.payload.hasVoted;\n      state.userVoterData.votedProposalId = parseInt(action.payload.proposalId);\n    },\n  },\n});\n\nexport const {\n  fetchOwner,\n  updateWorkflowStatus,\n  fetchUserVoterData,\n  fetchWhitelistedList,\n  addWhitelistAddress,\n  addUserHasVote,\n} = contractSlice.actions;\n\nexport default contractSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}